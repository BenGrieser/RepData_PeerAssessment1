html[ <- readLines[15]
html[15]
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode[10]
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
forg <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", 13)
?colSum
head(forg)
forg
forg <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
head(forg)
?colSums
?colSum
colSums(forg)
colSums(forg[4])
colSums(forg[0])
colSums(forg[1])
colSums(forg[9])
colSums(forg[4])
forg <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
colSums(forg[4])
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "Week3Quiz.csv")
aCommSur <- read.csv("Week3Quiz.csv")
head(aCommSu)
head(aCommSur)
?which
?transform
?subset
agricultureLogical <- transform(aCommSur, aCommSur$ACR == 3 && aCommSur$VAL >= 2)
head(agricultureLogical)
install.packages(plyr)
install.packages("plyr")
library(plyr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
agricultureLogical <- transform(aCommSur, satis = (aCommSur$ACR == 3 && aCommSur$VAL >= 2))
head(agricultureLogical)
which(agricultureLogical$satis)
which(agricultureLogical)
which(agricultureLogical[[satis]])
which(agricultureLogical[satis])
?which
agricultureLogical = (aCommSur$ACR == 3 && aCommSur$VAL >= 02)
head(agricultureLogical)
agricultureLogical
head(aCommSur)
agricultureLogical <- (aCommSur$ACR == 3 && aCommSur$VAL >= 02)
head(agricultureLogical)
agricultureLogical <- aCommSur$ACR == 3 && aCommSur$VAL >= 02
head(agricultureLogical)
agricultureLogical
aCommSur$ACR == 3
aCommSur$ACR == 3 && aCommSur$VAL >= 02
aCommSur$ACR == 3 && aCommSur$VAL >= "02"
aCommSur$ACR == 3 & aCommSur$VAL >= "02"
agricultureLogical <- aCommSur$ACR == 3 & aCommSur$VAL >= "02"
head(agricultureLogical)
which(agricultureLogical)
agricultureLogical <- aCommSur$ACR == 3 & aCommSur$AGS == 6
which(agricultureLogical)
install.packages("jpeg")
library(jpeg)
img <- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = TRUE)
#this will display your image to test you read it correctly
if(exists("rasterImage")){
plot(1:2, type='n')
rasterImage(img,1,1,2,2)
}
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "img.jpg")
img <- readJPEG("img.jpg", native = TRUE)
#this will display your image to test you read it correctly
if(exists("rasterImage")){
plot(1:2, type='n')
rasterImage(img,1,1,2,2)
}
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "img.jpg")
img <- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = TRUE)
#this will display your image to test you read it correctly
if(exists("rasterImage")){
plot(1:2, type='n')
rasterImage(img,1,1,2,2)
}
img <- readJPEG("img.jpg", native = TRUE)
#this will display your image to test you read it correctly
if(exists("rasterImage")){
plot(1:2, type='n')
rasterImage(img,1,1,2,2)
}
?quantile
quantile(img, probs=c(0.3,0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "FGDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", "Fedstats.csv")
fgdp <- read.csv("FGDP.csv")
fedStats <- read.csv(Fedstats.csv)
fedStats <- read.csv("Fedstats.csv")
head(fgdp)
fgdp$X
together <- inner_join(fgdp, fedStats, by = "X")
head(fedStats)
rename(fedStats, CountryCode = X)
rename(fedStats, CountryCode = "X")
head(fgdp)
names(fgdp)
?rename
rename(fgdp, X = CountryCode)
rename(fgdp, CountryCode = X)
head(fgdp)
dplyr::rename(fgdp, CountryCode = X)
head(fgdp)
together <- inner_join(fgdp, fedStats, by = c("X", "CountryCode"))
together <- inner_join(fgdp, fedStats, by = c("X" = "CountryCode"))
head(together)
length(together)
together[15]
together[13,]
str(together)
View(fedStats)
View(fedStats)
View(together)
View(fgdp)
View(together)
?quantile
View(together)
View(together)
View(fedStats)
together <- merge(fgdp, fedStats, by.x = "X", by.Y = "CountryCode")
together <- merge(fgdp, fedStats, by.x = X, by.Y = CountryCode)
together <- merge(fgdp, fedStats, by.x = "X", by.Y = "CountryCode", all = TRUE)
library(plyr)
library(dplyr)
together <- merge(fgdp, fedStats, by.x = "X", by.Y = "CountryCode", all = TRUE)
together <- merge(fgdp, fedStats, by.x = "X", by.y = "CountryCode", all = TRUE)
View(together)
?arrange
arrange(together, desc("Gross.domestic.product.2012"))
View(fgdp)
together <- merge(fgdp, fedStats, by.x = "X", by.y = "CountryCode", all = FALSE)
View(together)
arrange(together, desc(Gross.domestic.product.2012))
View(together)
together2 <- arrange(together, desc(Gross.domestic.product.2012))
View(together2)
together2 <- arrange(together, desc(as.number(Gross.domestic.product.2012)))
together2 <- arrange(together, desc(as.numeric(Gross.domestic.product.2012)))
head(together2, 15)
together2[13,]
View(fedStats)
View(fedStats)
View(fedStats)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "fsshid.csv")
df <- read.csv("fsshid.csv")
names(df)
?strsplit
nlist <- strsplit(names(df), split = "wgtp")
nlist[123]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "fdata.csv")
fdata <- read.csv("fdata.csv")
head(fdata)
?gsub
x3 <- gsub(",","",fdata$X.3)
head(x3)
x32 <- x3[4,]
x32 <- x3[4:]
x32 <- x3[4: ]
x32 <- x3[4:,]
x3(4)
x3[5]
x3[5:10]
x3[5:]
x3[5: ]
length(x3)
x4 <- x[5:330]
x4 <- x3[5:330]
?avg
?mean
mean(x4)
mean(as.numeric(x4))
mean(as.numeric(x4), na.rm = TRUE)
x4 <- as.numeric(x3[5:330])
supressWarnings()
suppressWarnings()
?supressWarnings
?suppressWarnings
x4 <- as.numeric(x3[5:330], na.rm = TRUE)
View(fdata)
View(fdata)
x4 <- x3[5:194]
mean(as.numeric(x4))
?grep
grep("^United", fdata$X.2)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", "fedstat.csv")
fstat <- read.csv("fedstat.csv")
?colnames
View(fstat)
names(fstat)
colnames(fdata) <- c("Short.Name", "GDP", "X.1")
names(fdata)
?merge
together <- merge(fdata, fstat, by.x = "Short.Name", by.y = "Short.Name")
together <- merge(fdata, fstat, by.x = "Short.Name", by.y = "Short.Name", all = TRUE)
together <- merge(fdata[, 1:3], fstat, by.x = "Short.Name", by.y = "Short.Name", all = TRUE)
head(together)
View(together)
colnames(fdata) <- c("CountryCode", "GDP", "X.1")
together <- merge(fdata[, 1:3], fstat, by.x = "CountryCode", by.y = "CountryCode", all = TRUE)
?grep
fyendjune <- grep("june", together$Special.Notes, ignore.case = TRUE)
length(fyendjune)
fyendjune <- grep(" june", together$Special.Notes, ignore.case = TRUE)
length(fyendjune)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
y2012 <- grep("2012", sampleTimes)
length(y2012)
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
View(df)
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
?colClasses
?classes
?class
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
example(plot)
example(plot)
?points
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
source('F:/Coding/Coursera/R/ExData_Plotting1/plot2.R')
library(swirl)
swirl()
play()
head(dataFrame)
View(dFsm)
nxt()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col = "blue")
abline(h=0.4, col = "red")
5
12
abline(h=0.5, col = "green")
dist(dFsm)
plot(hc)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
dsitmt
distmt
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(disTmp, 2, which.min())
apply(disTmp, 2, which.min
)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, ces = 3, lwd = 3)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
myedit("addPatt.R")
?myedit
myedit("addPatt.R", "addPatt")
myedit("addPatt.R")
nxt()
myedit
myedit("addPatt.R")
info()
skip()
swirl()
skip()
options(editor = "internal")
?options
swirl()
myedit("addPatt.R")
play()
?source
nxt()
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
v$d
V$d
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * svd1#d[1]) %*% t(svd1$v)
)
a1 <- (svd1$u[,1] * svd1#d[1]) %*% t(svd1$v[,1])
)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% svd$d[1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
library(swirl)
swirl()
dim(ssd)
names(ssd[,562:])
names(ssd[,562:end])
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
option(editor = "internal")
options(editor = "internal")
myedit(showXY.R)
exit()
options(editor = "internal")
stop()
?
edit
end()
quit())
quit()
options(editor = "internal")
swirl()
library(swirl)
swirl()
myedit("showXY.R")
showme(1:6)
showMe(1:6)
mdist <- matrix(x[,1:3])
mdist <- matrix(ssd[,1:3])
mdist <- matrix(sub1[,1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, ;ab.com=unclass(sub1$activity))
myplclust(hclustering, lab.com=unclass(sub1$activity))
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12], maxCon))
mdist <- dist(sub1[,10:12], maxCon)
mdist <- dist(c(sub1[,10:12], maxCon))
mdist <- dist(sub1[,10:12])
mdist <- dist(c(sub1[,c(10:12, maxCon)))
mdist <- dist(c(sub1[,c(10:12, maxCon))
mdist <- dist(c(sub1[,c(10:12, maxCon)])
)
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[, -c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$cluster)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
library(swirk)
library(swirl)
swirl()
dim(pm0)
head(pm0)
names(cnames)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
sumary(x0)
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
date <- as.Date(as.character(dates), "%Y%m%d")
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(sire0)
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, county.site == 63.2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.Id == 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.date(as.character(pm0sub$Date), "%Y%m%d")
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates, x0sub, pch = 20)
plot(dates0, x0sub, pch = 20)
abline(median(x0sub), lwd = 2, na.rm = TRUE)
abline(median(x0sub[na.rm = TRUE]), lwd = 2)
abline(dates0, median(x0sub), lwd = 2, na.rm = TRUE)
abline(h=median(x0sub), lwd = 2, na.rm = TRUE)
abline(h=median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h=median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(names(mn0), mean(mn0))
d0 <- data.frame(state = names(mn0), mean = mn0
)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "State")
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, rep(1,52), mrg[,2], xlim = c(.5,2.5))
with(mrg, plot(rep(1,52)), mrg[,2], xlim = c(.5,2.5))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5,2.5)))
points(rep(2,52), mrg[,3])
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg#mean.y, ]
mrg[mrg$mean.x < mrg$mean.y, ]
setwd("F:/Coding/Coursera/R/RepData_PeerAssessment1")
